#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
using namespace std;

class DSU {
private:
    vector<int> parent, size, rank, parity;
    int componentCount;

public:
    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        rank.resize(n, 0);
        parity.resize(n, 0); // Used for relation/parity tracking
        componentCount = n;

        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    // Find with path compression
    int find(int x) {
        if (parent[x] != x) {
            int orig_parent = parent[x];
            parent[x] = find(parent[x]);
            parity[x] ^= parity[orig_parent]; // Update parity
        }
        return parent[x];
    }

    // Union by size
    bool unite(int x, int y, int rel = 0) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX == rootY) {
            // Already in the same component - check if relation is valid
            return ((parity[x] ^ parity[y]) == rel);
        }

        // Union by size: attach smaller tree to the root of the larger one
        if (size[rootX] < size[rootY]) {
            swap(rootX, rootY);
        }

        parent[rootY] = rootX;
        parity[rootY] = parity[x] ^ parity[y] ^ rel; // Update parity

        size[rootX] += size[rootY];
        componentCount--;
        return true;
    }

    // Check if x and y are in the same set
    bool sameSet(int x, int y) {
        return find(x) == find(y);
    }

    // Check relation between x and y (0 = same, 1 = different)
    int getRelation(int x, int y) {
        assert(find(x) == find(y));
        return parity[x] ^ parity[y]; // 0 = same group, 1 = different group
    }

    // Get the size of the component containing x
    int getSize(int x) {
        return size[find(x)];
    }

    // Get the number of connected components
    int getComponentCount() {
        return componentCount;
    }

    // 2-SAT Helper: Add an implication a -> b
    void addClause(int a, int b) {
        unite(2 * a + 1, 2 * b);       // ¬a → b
        unite(2 * b + 1, 2 * a);       // ¬b → a
    }

    // Check if a 2-SAT formula is satisfiable
    bool isSatisfiable() {
        for (int i = 0; i < parent.size(); i += 2) {
            if (sameSet(i, i + 1)) {  // x and ¬x are in the same set → UNSAT
                return false;
            }
        }
        return true;
    }
};

// Kruskal's algorithm using DSU
struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

int kruskal(int n, vector<Edge>& edges) {
    DSU dsu(n);
    sort(edges.begin(), edges.end());

    int mstWeight = 0;
    for (const Edge& edge : edges) {
        if (dsu.unite(edge.u, edge.v)) {
            mstWeight += edge.weight;
        }
    }
    return mstWeight;
}

// Cycle detection using DSU
bool hasCycle(int n, vector<Edge>& edges) {
    DSU dsu(n);
    for (const Edge& edge : edges) {
        if (dsu.sameSet(edge.u, edge.v)) {
            return true;  // Cycle detected
        }
        dsu.unite(edge.u, edge.v);
    }
    return false;
}

// Dynamic connectivity using DSU
bool dynamicConnectivity(int n, vector<pair<int, int>>& queries) {
    DSU dsu(n);
    for (const auto& query : queries) {
        int u = query.first;
        int v = query.second;
        if (dsu.sameSet(u, v)) {
            cout << u << " and " << v << " are already connected.\n";
        } else {
            dsu.unite(u, v);
            cout << u << " and " << v << " are now connected.\n";
        }
    }
    return true;
}

// Connected components count
int countComponents(int n, vector<Edge>& edges) {
    DSU dsu(n);
    for (const Edge& edge : edges) {
        dsu.unite(edge.u, edge.v);
    }
    return dsu.getComponentCount();
}

int main() {
    int n = 5; // Number of nodes (0-based indexing)

    // Example for Kruskal's Algorithm
    vector<Edge> edges = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };
    cout << "MST weight: " << kruskal(n, edges) << endl;

    // Example for Cycle Detection
    vector<Edge> cycleEdges = {
        {0, 1, 1}, {1, 2, 1}, {2, 0, 1}
    };
    cout << "Cycle Detected: " << (hasCycle(n, cycleEdges) ? "Yes" : "No") << endl;

    // Example for Dynamic Connectivity
    vector<pair<int, int>> queries = {
        {0, 1}, {1, 2}, {0, 2}
    };
    dynamicConnectivity(n, queries);

    // Example for 2-SAT
    DSU dsu2Sat(6); // 3 variables, hence 6 nodes (2*x for x, 2*x+1 for ¬x)
    dsu2Sat.addClause(0, 1); // x0 OR x1
    dsu2Sat.addClause(1, 2); // x1 OR x2
    cout << "2-SAT satisfiable: " << (dsu2Sat.isSatisfiable() ? "Yes" : "No") << endl;

    return 0;
}
