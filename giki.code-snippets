{
	"first": {
		"prefix": "sieve",
		"body": [
			"vector<int> smallest_factor;",
			"vector<bool> prime;",
			"vector<int> primes;",
			"",
			"void sieve(int maximum) {",
			"    maximum = max(maximum, 1);",
			"    smallest_factor.assign(maximum + 1, 0);",
			"    prime.assign(maximum + 1, true);",
			"    prime[0] = prime[1] = false;",
			"    primes = {};",
			"",
			"    for (int p = 2; p <= maximum; p++)",
			"        if (prime[p]) {",
			"            smallest_factor[p] = p;",
			"            primes.push_back(p);",
			"",
			"            for (int64_t i = int64_t(p) * p; i <= maximum; i += p)",
			"                if (prime[i]) {",
			"                    prime[i] = false;",
			"                    smallest_factor[i] = p;",
			"                }",
			"        }",
			"}",
			"",
			"// Determines whether n is prime in worst case O(sqrt n / log n). Requires having run `sieve` up to at least sqrt(n).",
			"// If we've run `sieve` up to at least n, takes O(1) time.",
			"bool is_prime(int64_t n) {",
			"    int64_t sieve_max = int64_t(smallest_factor.size()) - 1;",
			"    assert(1 <= n && n <= sieve_max * sieve_max);",
			"",
			"    if (n <= sieve_max)",
			"        return prime[n];",
			"",
			"    for (int64_t p : primes) {",
			"        if (p * p > n)",
			"            break;",
			"",
			"        if (n % p == 0)",
			"            return false;",
			"    }",
			"",
			"    return true;",
			"}",
			"",
			"// Prime factorizes n in worst case O(sqrt n / log n). Requires having run `sieve` up to at least sqrt(n).",
			"// If we've run `sieve` up to at least n, takes O(log n) time.",
			"template<typename T>",
			"vector<pair<T, int>> prime_factorize(T n) {",
			"    int64_t sieve_max = int64_t(smallest_factor.size()) - 1;",
			"    assert(1 <= n && n <= sieve_max * sieve_max);",
			"    vector<pair<T, int>> result;//stores <factor,power> as a pair",
			"",
			"    if (n <= sieve_max) {",
			"        while (n != 1) {",
			"            int p = smallest_factor[n];",
			"            int exponent = 0;",
			"",
			"            do {",
			"                n /= p;",
			"                exponent++;",
			"            } while (n % p == 0);",
			"",
			"            result.emplace_back(p, exponent);",
			"        }",
			"",
			"        return result;",
			"    }",
			"",
			"    for (int p : primes) {",
			"        if (int64_t(p) * p > n)",
			"            break;",
			"",
			"        if (n % p == 0) {",
			"            result.emplace_back(p, 0);",
			"",
			"            do {",
			"                n /= p;",
			"                result.back().second++;",
			"            } while (n % p == 0);",
			"        }",
			"    }",
			"",
			"    if (n > 1)",
			"        result.emplace_back(n, 1);",
			"",
			"    return result;",
			"}"
		],
		"description": ""
	},
	"second": {
		"prefix": "mergesort",
		"body": [
			"class MergeSortTree {",
			"    int n;",
			"    vector<vector<int>> t;",
			"    void build(vector<int>& a, int v, int l, int r) {",
			"        if (l == r) t[v] = {a[l]};",
			"        else {",
			"            int m = (l + r) / 2;",
			"            build(a, v*2, l, m);",
			"            build(a, v*2+1, m+1, r);",
			"            merge(t[v*2].begin(), t[v*2].end(), t[v*2+1].begin(), t[v*2+1].end(), back_inserter(t[v]));",
			"        }",
			"    }",
			"public:",
			"    MergeSortTree(vector<int>& a) {",
			"        n = a.size(); t.resize(4 * n);",
			"        build(a, 1, 0, n - 1);",
			"    }",
			"    int query(int v, int l, int r, int ql, int qr, int x) {",
			"        if (qr < l || r < ql) return 0;",
			"        if (ql <= l && r <= qr) {",
			"            // > x : t[v].end() - upper_bound(t[v].begin(), t[v].end(), x)",
			"            // >= x: t[v].end() - lower_bound(t[v].begin(), t[v].end(), x)",
			"            // < x : lower_bound(t[v].begin(), t[v].end(), x) - t[v].begin()",
			"            // <= x: upper_bound(t[v].begin(), t[v].end(), x) - t[v].begin()",
			"            return t[v].end() - upper_bound(t[v].begin(), t[v].end(), x); ",
			"        }",
			"        int m = (l + r) / 2;",
			"        return query(v*2, l, m, ql, qr, x) + query(v*2+1, m+1, r, ql, qr, x);",
			"    }",
			"};",
			""
		],
		"description": ""
	},
	"third": {
		"prefix": "gcc",
		"body": [
			"// GCC Built-in Functions (for long long integers)",
			"__builtin_clzll(x);       // Number of leading zeros in the 64-bit binary representation",
			"__builtin_ctzll(x);       // Number of trailing zeros in the 64-bit binary representation",
			"__builtin_popcountll(x);  // Number of set bits (1s) in the 64-bit binary representation",
			"",
			"// Bit access",
			"int ith_bit = (n >> i) & 1; // Extract the i-th bit (0-based from right)",
			"",
			"// Power of two",
			"int two_pow_x = (1 << x);   // 2^x using bit shifting",
			"",
			"// Bitwise identities",
			"// All below are true identities and useful for understanding how bits behave:",
			"",
			"// a | b = (a ^ b) + (a & b)",
			"int result1 = (a ^ b) + (a & b);",
			"",
			"// a ^ (a & b) = (a | b) ^ b",
			"int result2 = (a | b) ^ b;",
			"",
			"// b ^ (a & b) = (a | b) ^ a",
			"int result3 = (a | b) ^ a;",
			"",
			"// (a & b) ^ (a | b) = a ^ b",
			"int result4 = (a & b) ^ (a | b);",
			"",
			"// a + b = (a ^ b) + (a & b) * 2",
			"int result5 = (a ^ b) + 2 * (a & b);",
			"",
			"// a - b = (a ^ (a & b)) - ((a | b) ^ a)",
			"int result6 = (a ^ (a & b)) - ((a | b) ^ a);",
			"",
			"// a - b = ((a | b) ^ b) - ((a | b) ^ a)",
			"int result7 = ((a | b) ^ b) - ((a | b) ^ a);",
			"",
			"// a - b = (a ^ (a & b)) - (b ^ (a & b))",
			"int result8 = (a ^ (a & b)) - (b ^ (a & b));",
			"",
			"// a - b = ((a | b) ^ b) - (b ^ (a & b))",
			"int result9 = ((a | b) ^ b) - (b ^ (a & b));",
			""
		],
		"description": ""
	},
	"fourth": {
		"prefix": "dsu",
		"body": [
			"//0 based DSU, for 1-based change constructor to n+1 and iota(parent.begin()+1,parent.end(),1)",
			"struct DSU {",
			"    vector<int> parent, size;",
			"",
			"    DSU(int n) {",
			"        parent.resize(n);",
			"        size.assign(n, 1);",
			"        iota(parent.begin(), parent.end(), 0);",
			"    }",
			"",
			"    int find(int x) {",
			"        return (parent[x] == x) ? x : parent[x] = find(parent[x]);",
			"    }",
			"",
			"    bool unite(int x, int y) {",
			"        x = find(x), y = find(y);",
			"        if (x == y) return false;",
			"        if (size[x] < size[y]) swap(x, y);",
			"        parent[y] = x;",
			"        size[x] += size[y];",
			"        return true;",
			"    }",
			"",
			"//if two nodes in same component",
			"    bool same(int x, int y) {",
			"        return find(x) == find(y);",
			"    }",
			"",
			"//size of x's component",
			"    int get_size(int x) {",
			"        return size[find(x)];",
			"    }",
			"",
			"    void reset() {",
			"        iota(parent.begin(), parent.end(), 0);",
			"        fill(size.begin(), size.end(), 1);",
			"    }",
			"};"
		],
		"description": ""
	},
	"fifth": {
		"prefix": "kruskal",
		"body": [
			"struct Edge {",
			"    int u, v, w;",
			"    bool operator<(const Edge& e) const {",
			"        return w < e.w;",
			"    }",
			"};",
			"//0-based kruskal, for 1-based change dsu(n) to dsu(n+1)",
			"//change dsu accordingly",
			"int kruskal(int n, vector<Edge>& edges, vector<Edge>& mst_edges) {",
			"    sort(edges.begin(), edges.end());",
			"    DSU dsu(n);",
			"    int cost = 0;",
			"    for (const Edge& e : edges) {",
			"        if (dsu.unite(e.u, e.v)) {",
			"            cost += e.w;",
			"            mst_edges.push_back(e);",
			"        }",
			"    }",
			"    return cost;",
			"}",
			""
		],
		"description": ""
	},
	"sixth": {
		"prefix": "trie",
		"body": [
			"class TrieNode {",
			"public:",
			"    TrieNode* next[26] = {};",
			"    bool end = false;",
			"};",
			"",
			"class Trie {",
			"    TrieNode* root = new TrieNode;",
			"public:",
			"    void insert(const string& s) {",
			"        TrieNode* cur = root;",
			"        for (char c : s) {",
			"            int i = c - 'a';",
			"            if (!cur->next[i]) cur->next[i] = new TrieNode;",
			"            cur = cur->next[i];",
			"        }",
			"        cur->end = true;",
			"    }",
			"",
			"    bool search(const string& s) {",
			"        TrieNode* cur = root;",
			"        for (char c : s) {",
			"            int i = c - 'a';",
			"            if (!cur->next[i]) return false;",
			"            cur = cur->next[i];",
			"        }",
			"        return cur->end;",
			"    }",
			"//check if a given prefix exists in trie",
			"    bool starts_with(const string& prefix) {",
			"        TrieNode* cur = root;",
			"        for (char c : prefix) {",
			"            int i = c - 'a';",
			"            if (!cur->next[i]) return false;",
			"            cur = cur->next[i];",
			"        }",
			"        return true;",
			"    }",
			"};",
			""
		],
		"description": ""
	},
	"seventh": {
		"prefix": "combinatroic",
		"body": [
			"const int MOD = 1e9 + 7;",
			"const int N = 1e5 + 10;",
			"",
			"int fact[N], invFact[N];",
			"",
			"// Fast exponentiation: base^exp % mod",
			"int binExp(int base, int exp, int mod = MOD) {",
			"    int result = 1;",
			"    while (exp > 0) {",
			"        if (exp & 1)",
			"            result = (1LL * result * base) % mod;",
			"        base = (1LL * base * base) % mod;",
			"        exp >>= 1;",
			"    }",
			"    return result;",
			"}",
			"",
			"// Modular inverse using Fermat's little theorem",
			"int modInverse(int a, int mod = MOD) {",
			"    return binExp(a, mod - 2, mod);",
			"}",
			"",
			"// Precomputes factorials and their inverses modulo mod",
			"void precomputeFactorials(int mod = MOD) {",
			"    fact[0] = 1;",
			"    for (int i = 1; i < N; i++)",
			"        fact[i] = (1LL * fact[i - 1] * i) % mod;",
			"",
			"    invFact[N - 1] = modInverse(fact[N - 1], mod);",
			"    for (int i = N - 2; i >= 0; i--)",
			"        invFact[i] = (1LL * invFact[i + 1] * (i + 1)) % mod;",
			"}",
			"",
			"// Computes nCr % mod",
			"int nCr(int n, int r, int mod = MOD) {",
			"    if (r > n || r < 0) return 0;",
			"    return (1LL * fact[n] * invFact[r] % mod * invFact[n - r]) % mod;",
			"}",
			"",
			"// Computes nPr % mod",
			"int nPr(int n, int r, int mod = MOD) {",
			"    if (r > n || r < 0) return 0;",
			"    return (1LL * fact[n] * invFact[n - r]) % mod;",
			"}",
			""
		],
		"description": ""
	},
	"eighth": {
		"prefix": "scc",
		"body": [
			"// 1. Resize g, rg, vis to size n + 1 instead of n",
			"// 2. Loop from 1 to n instead of 0 to n-1",
			"// 3. Ensure all node indices in edges are 1-based",
			"",
			"vector<vector<int>> g, rg, scc;",
			"vector<bool> vis;",
			"vector<int> order;",
			"",
			"void dfs1(int u) {",
			"    vis[u] = true;",
			"    for (int v : g[u])",
			"        if (!vis[v])",
			"            dfs1(v);",
			"    order.push_back(u);",
			"}",
			"",
			"void dfs2(int u, vector<int>& comp) {",
			"    vis[u] = true;",
			"    comp.push_back(u);",
			"    for (int v : rg[u])",
			"        if (!vis[v])",
			"            dfs2(v, comp);",
			"}",
			"",
			"void find_scc(int n) {",
			"    rg.assign(n, {});",
			"    for (int u = 0; u < n; ++u)",
			"        for (int v : g[u])",
			"            rg[v].push_back(u); // Build reverse graph",
			"",
			"    vis.assign(n, false);",
			"    order.clear();",
			"    for (int i = 0; i < n; ++i)",
			"        if (!vis[i])",
			"            dfs1(i);",
			"",
			"    vis.assign(n, false);",
			"    reverse(order.begin(), order.end());",
			"    scc.clear();",
			"    for (int u : order)",
			"        if (!vis[u]) {",
			"            vector<int> comp;",
			"            dfs2(u, comp);",
			"            scc.push_back(comp);",
			"        }",
			"}",
			""
		],
		"description": ""
	},
	"ninth": {
		"prefix": "matching",
		"body": [
			"//For 1-based",
			"//Run all loops from 1 to n+1",
			"//change vector sizes to n+1",
			"",
			"vector<vector<int>> g;",
			"vector<int> pair_u, pair_v, dist;",
			"int n, m;",
			"",
			"bool bfs() {",
			"    queue<int> q;",
			"    for (int u = 0; u < n; u++) {",
			"        if (pair_u[u] == -1) dist[u] = 0, q.push(u);",
			"        else dist[u] = 1e9;",
			"    }",
			"    bool found = 0;",
			"    while (!q.empty()) {",
			"        int u = q.front(); q.pop();",
			"        for (int v : g[u]) {",
			"            if (pair_v[v] == -1) found = 1;",
			"            else if (dist[pair_v[v]] == 1e9) {",
			"                dist[pair_v[v]] = dist[u] + 1;",
			"                q.push(pair_v[v]);",
			"            }",
			"        }",
			"    }",
			"    return found;",
			"}",
			"",
			"bool dfs(int u) {",
			"    for (int v : g[u]) {",
			"        if (pair_v[v] == -1 || (dist[pair_v[v]] == dist[u] + 1 && dfs(pair_v[v]))) {",
			"            pair_u[u] = v; pair_v[v] = u;",
			"            return 1;",
			"        }",
			"    }",
			"    return 0;",
			"}",
			"",
			"int hopcroft_karp(int _n, int _m) {",
			"    n = _n, m = _m;",
			"    pair_u.assign(n, -1);",
			"    pair_v.assign(m, -1);",
			"    dist.resize(n);",
			"    int match = 0;",
			"    while (bfs())",
			"        for (int u = 0; u < n; u++)",
			"            if (pair_u[u] == -1 && dfs(u))",
			"                match++;",
			"    return match;",
			"}",
			""
		],
		"description": ""
	},
	"tenth": {
		"prefix": "kmp",
		"body": [
			"// Computes prefix function for KMP",
			"vector<int> kmp_prefix(const string& pat) {",
			"    int n = pat.size();",
			"    vector<int> pi(n);",
			"    for (int i = 1, j = 0; i < n; i++) {",
			"        while (j && pat[i] != pat[j]) j = pi[j - 1];",
			"        if (pat[i] == pat[j]) j++;",
			"        pi[i] = j;",
			"    }",
			"    return pi;",
			"}",
			"",
			"// Returns all starting indices where pat occurs in text",
			"vector<int> kmp_match(const string& text, const string& pat) {",
			"    vector<int> pi = kmp_prefix(pat), res;",
			"    for (int i = 0, j = 0; i < text.size(); i++) {",
			"        while (j && text[i] != pat[j]) j = pi[j - 1];",
			"        if (text[i] == pat[j]) j++;",
			"        if (j == pat.size()) {",
			"            res.push_back(i - j + 1); // match found at i - j + 1",
			"            j = pi[j - 1];",
			"        }",
			"    }",
			"    return res;",
			"}",
			""
		],
		"description": ""
	},
	"eleventh": {
		"prefix": "segment_tree",
		"body": [
			"/*",
			" * Segment Tree with Lazy Propagation",
			" * Supports:",
			" *   1. Range add and range sum queries",
			" *   2. Point add and point query",
			" *",
			" * How to use (0-based indexing):",
			" *   int n = arr.size();",
			" *   build(1, 0, n - 1);",
			" *",
			" *   // Range operations:",
			" *   update(1, 0, n - 1, ql, qr, val);          // add `val` to all in [ql, qr]",
			" *   long long sum = query(1, 0, n - 1, ql, qr); // get sum of [ql, qr]",
			" *",
			" *   // Point operations:",
			" *   point_update(1, 0, n - 1, idx, val);        // add `val` to arr[idx]",
			" *   long long v = point_query(1, 0, n - 1, idx); // get value at arr[idx]",
			" */",
			"",
			"const int MAXN = 1e5;",
			"long long tree[4 * MAXN], lazy[4 * MAXN];",
			"vector<long long> arr;",
			"",
			"void build(int node, int l, int r) {",
			"    if (l == r) {",
			"        tree[node] = arr[l];",
			"        return;",
			"    }",
			"    int mid = (l + r) / 2;",
			"    build(2 * node,     l,     mid);",
			"    build(2 * node + 1, mid+1, r);",
			"    tree[node] = tree[2 * node] + tree[2 * node + 1];",
			"}",
			"",
			"void push(int node, int l, int r) {",
			"    if (lazy[node]) {",
			"        tree[node] += lazy[node] * (r - l + 1);",
			"        if (l != r) {",
			"            lazy[2 * node]     += lazy[node];",
			"            lazy[2 * node + 1] += lazy[node];",
			"        }",
			"        lazy[node] = 0;",
			"    }",
			"}",
			"",
			"void update(int node, int l, int r, int ql, int qr, long long val) {",
			"    push(node, l, r);",
			"    if (qr < l || r < ql) return;",
			"    if (ql <= l && r <= qr) {",
			"        lazy[node] += val;",
			"        push(node, l, r);",
			"        return;",
			"    }",
			"    int mid = (l + r) / 2;",
			"    update(2 * node,     l,     mid, ql, qr, val);",
			"    update(2 * node + 1, mid+1, r,   ql, qr, val);",
			"    tree[node] = tree[2 * node] + tree[2 * node + 1];",
			"}",
			"",
			"long long query(int node, int l, int r, int ql, int qr) {",
			"    push(node, l, r);",
			"    if (qr < l || r < ql) return 0;",
			"    if (ql <= l && r <= qr) return tree[node];",
			"    int mid = (l + r) / 2;",
			"    return query(2 * node,     l,     mid, ql, qr)",
			"         + query(2 * node + 1, mid+1, r,   ql, qr);",
			"}",
			"",
			"// Point update: add `val` at index `idx`",
			"void point_update(int node, int l, int r, int idx, long long val) {",
			"    push(node, l, r);",
			"    if (l == r) {",
			"        tree[node] += val;",
			"        return;",
			"    }",
			"    int mid = (l + r) / 2;",
			"    if (idx <= mid) point_update(2 * node,     l,     mid, idx, val);",
			"    else            point_update(2 * node + 1, mid+1, r,   idx, val);",
			"    tree[node] = tree[2 * node] + tree[2 * node + 1];",
			"}",
			"",
			"// Point query: get value at index `idx`",
			"long long point_query(int node, int l, int r, int idx) {",
			"    push(node, l, r);",
			"    if (l == r) return tree[node];",
			"    int mid = (l + r) / 2;",
			"    if (idx <= mid) return point_query(2 * node,     l,     mid, idx);",
			"    else            return point_query(2 * node + 1, mid+1, r,   idx);",
			"}",
			""
		],
		"description": ""
	},
	"twelfth": {
		"prefix": "toposort",
		"body": [
			"// gr[u] is the list of vertices v such that u → v",
			"// If the graph has a cycle, the returned vector will have size < gr.size().",
			"vi topoSort(const vector<vi>& gr) {",
			"    vi indeg(gr.size()), q;",
			"    for (auto& li : gr)",
			"        for (int x : li)",
			"            indeg[x]++;",
			"",
			"    forn(i,0,gr.size())",
			"        if (indeg[i] == 0)",
			"            q.push_back(i);",
			"",
			"    forn(j,0,q.size())",
			"        for (int x : gr[q[j]])",
			"            if (--indeg[x] == 0)",
			"                q.push_back(x);",
			"",
			"    return q; ",
			"}"
		],
		"description": ""
	},
	"thirteen": {
		"prefix": "floydwarshall",
		"body": [
			"void floydWarshall(vector<vi>& m) {",
			"int n = sz(m);",
			"forn(i,0,n) m[i][i] = min(m[i][i], 0LL);",
			"forn(k,0,n) forn(i,0,n) forn(j,0,n)",
			"if (m[i][k] != inf && m[k][j] != inf) {",
			"auto newDist = max(m[i][k] + m[k][j], -inf);",
			"m[i][j] = min(m[i][j], newDist);",
			"}",
			"forn(k,0,n) if (m[k][k] < 0) forn(i,0,n) forn(j,0,n)",
			"if (m[i][k] != inf && m[k][j] != inf) m[i][j] = -inf;",
			"}",
			""
		],
		"description": ""
	},
	"fourteen": {
		"prefix": "lca",
		"body": [
			"const int MAXN = 1e5;",
			"const int LOG = 20;",
			"",
			"vector<int> tree[MAXN];",
			"int up[MAXN][LOG];",
			"int depth[MAXN];",
			"",
			"void dfs(int v, int p) {",
			"    up[v][0] = p;",
			"    for (int i = 1; i < LOG; i++) {",
			"        up[v][i] = up[up[v][i - 1]][i - 1];",
			"    }",
			"    for (int u : tree[v]) {",
			"        if (u != p) {",
			"            depth[u] = depth[v] + 1;",
			"            dfs(u, v);",
			"        }",
			"    }",
			"}",
			"",
			"int lca(int u, int v) {",
			"    if (depth[u] < depth[v]) swap(u, v);",
			"    for (int i = LOG - 1; i >= 0; i--) {",
			"        if (depth[u] - (1 << i) >= depth[v])",
			"            u = up[u][i];",
			"    }",
			"    if (u == v) return u;",
			"    for (int i = LOG - 1; i >= 0; i--) {",
			"        if (up[u][i] != up[v][i]) {",
			"            u = up[u][i];",
			"            v = up[v][i];",
			"        }",
			"    }",
			"    return up[u][0];",
			"}",
			"dfs(0,0); #in main",
			""
		],
		"description": ""
	},
	"fifteen": {
		"prefix": "flow",
		"body": [
			"/*",
			" * Edmonds–Karp (BFS) for Max Flow + Min Cut",
			" *",
			" * Template parameters:",
			" *   T = capacity type (e.g. int, long long)",
			" *",
			" * Arguments:",
			" *   g: adjacency list as vector<unordered_map<int,T>>",
			" *      g[u][v] = capacity of edge u→v",
			" *   s: source vertex (0 ≤ s < n)",
			" *   t: sink   vertex (0 ≤ t < n)",
			" *",
			" * Returns:",
			" *   pair.first  = maximum flow value",
			" *   pair.second = vector of edges (u,v) in the minimum s–t cut",
			" *",
			" * Usage:",
			" *   int n = ...;",
			" *   vector<unordered_map<int,long long>> g(n);",
			" *   // populate g[u][v] = initial capacity",
			" *   auto [flow, cut_edges] = edk<long long>(g, source, sink);",
			" */",
			"template<class T>",
			"pair<T, vector<pair<int,int>>> edk(vector<unordered_map<int,T>>& g, int s, int t) {",
			"    int n = g.size();",
			"    auto og = g;                // keep original capacities",
			"    T flow = 0, aug;",
			"    vector<int> parent(n), q(n);",
			"",
			"    // Repeatedly find augmenting paths via BFS",
			"    while (true) {",
			"        fill(parent.begin(), parent.end(), -1);",
			"        parent[s] = s;",
			"        int l = 0, r = 0;",
			"        q[r++] = s;",
			"",
			"        // BFS to set parent[] until we reach t",
			"        while (l < r && parent[t] == -1) {",
			"            int u = q[l++];",
			"            for (auto& e : g[u]) {",
			"                int v = e.first;",
			"                if (e.second > 0 && parent[v] == -1) {",
			"                    parent[v] = u;",
			"                    q[r++] = v;",
			"                }",
			"            }",
			"        }",
			"        if (parent[t] == -1) break;  // no more augmenting path",
			"",
			"        // Find bottleneck capacity",
			"        aug = numeric_limits<T>::max();",
			"        for (int v = t; v != s; v = parent[v]) {",
			"            aug = min(aug, g[parent[v]][v]);",
			"        }",
			"",
			"        // Augment flow, update residual graph",
			"        for (int v = t; v != s; v = parent[v]) {",
			"            int u = parent[v];",
			"            g[u][v] -= aug;",
			"            if (g[u][v] == 0) g[u].erase(v);",
			"            g[v][u] += aug;",
			"        }",
			"        flow += aug;",
			"    }",
			"",
			"    // After max‐flow: find reachable vertices in residual graph",
			"    vector<char> vis(n, false);",
			"    queue<int> bfs;",
			"    vis[s] = true;",
			"    bfs.push(s);",
			"    while (!bfs.empty()) {",
			"        int u = bfs.front(); bfs.pop();",
			"        for (auto& e : g[u]) {",
			"            int v = e.first;",
			"            if (e.second > 0 && !vis[v]) {",
			"                vis[v] = true;",
			"                bfs.push(v);",
			"            }",
			"        }",
			"    }",
			"",
			"    // Collect min‐cut edges: from reachable to non‐reachable in original graph",
			"    vector<pair<int,int>> cut;",
			"    for (int u = 0; u < n; u++) {",
			"        if (!vis[u]) continue;",
			"        for (auto& e : og[u]) {",
			"            int v = e.first;",
			"            if (e.second > 0 && !vis[v]) {",
			"                cut.emplace_back(u, v);",
			"            }",
			"        }",
			"    }",
			"",
			"    return {flow, cut};",
			"}",
			"",
			"  int main(){",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    // Example: graph with 4 nodes (0..3)",
			"    // Edges: 0→1 (cap 3), 0→2 (cap 2), 1→2 (cap 1), 1→3 (cap 2), 2→3 (cap 4)",
			"    int n = 4;",
			"    int source = 0, sink = 3;",
			"    vector<unordered_map<int,long long>> g(n);",
			"    g[0][1] = 3;",
			"    g[0][2] = 2;",
			"    g[1][2] = 1;",
			"    g[1][3] = 2;",
			"    g[2][3] = 4;",
			"",
			"    auto [maxFlow, minCutEdges] = edk<long long>(g, source, sink);",
			"",
			"    cout << \"Max flow: \" << maxFlow << \"\\n\";",
			"",
			"    cout << \"Min-cut edges (u -> v):\\n\";",
			"    for (auto [u, v] : minCutEdges) {",
			"        cout << u << \" -> \" << v << \"\\n\";",
			"    }",
			"",
			"}"
		],
		"description": ""
	},
	"sixteen": {
		"prefix": "hamiltonian",
		"body": [
			"",
			"/*",
			" * Finds a Hamiltonian path in a directed or undirected graph using bitmask DP.",
			" * Returns a vector of vertex indices (0-based) representing the path,",
			" * or an empty vector if no Hamiltonian path exists.",
			" */",
			"vector<int> hamiltonianPath(int n, const vector<vector<int>>& adj) {",
			"    int FULL = 1 << n;",
			"    // dp[mask][u] = true if there is a path covering vertices in 'mask'",
			"    // ending at vertex u",
			"    vector<vector<bool>> dp(FULL, vector<bool>(n, false));",
			"    // par[mask][u] = previous vertex before u on that path",
			"    vector<vector<int>> par(FULL, vector<int>(n, -1));",
			"",
			"    // Base case: path of length 1 starting at each i",
			"    for (int i = 0; i < n; i++) {",
			"        dp[1 << i][i] = true;",
			"    }",
			"",
			"    // Build up all masks",
			"    for (int mask = 0; mask < FULL; mask++) {",
			"        for (int u = 0; u < n; u++) {",
			"            if (!dp[mask][u]) continue;             // skip unreachable states",
			"            // Try to extend path ending at u by an edge u→v",
			"            for (int v : adj[u]) {",
			"                if (mask & (1 << v)) continue;      // skip if v already in mask",
			"                int nextMask = mask | (1 << v);",
			"                if (!dp[nextMask][v]) {",
			"                    dp[nextMask][v] = true;",
			"                    par[nextMask][v] = u;           // record predecessor",
			"                }",
			"            }",
			"        }",
			"    }",
			"",
			"    // Look for any path that covers all vertices",
			"    int end = -1, fullMask = FULL - 1;",
			"    for (int u = 0; u < n; u++) {",
			"        if (dp[fullMask][u]) {",
			"            end = u;",
			"            break;",
			"        }",
			"    }",
			"    if (end == -1) {",
			"        return {};  // no Hamiltonian path found",
			"    }",
			"",
			"    // Reconstruct the path by walking backwards through 'par'",
			"    vector<int> path;",
			"    int mask = fullMask, cur = end;",
			"    while (cur != -1) {",
			"        path.push_back(cur);",
			"        int p = par[mask][cur];",
			"        mask ^= 1 << cur;",
			"        cur = p;",
			"    }",
			"    reverse(path.begin(), path.end());",
			"    return path;",
			"}",
			"",
			"int main() {",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    int n, m;",
			"    // n = number of vertices, m = number of edges",
			"    cin >> n >> m;",
			"    vector<vector<int>> adj(n);",
			"    for (int i = 0; i < m; i++) {",
			"        int u, v;",
			"        cin >> u >> v;",
			"        // assuming input is 1-based; convert to 0-based",
			"        --u; --v;",
			"        adj[u].push_back(v);",
			"        // For undirected graphs, also add:",
			"        // adj[v].push_back(u);",
			"    }",
			"",
			"    // Find Hamiltonian Path",
			"    vector<int> path = hamiltonianPath(n, adj);",
			"",
			"    if (path.empty()) {",
			"        cout << \"No Hamiltonian path exists\\n\";",
			"    } else {",
			"        cout << \"Hamiltonian path:\"; ",
			"        for (int u : path) {",
			"            cout << ' ' << (u + 1); // convert back to 1-based for output",
			"        }",
			"        cout << '\\n';",
			"    }",
			"",
			"    return 0;",
			"}"
		],
		"description": ""
	},
	"seventeen": {
		"prefix": "eulerpath",
		"body": [
			"/*",
			" * Eulerian Trail/Circuit Finder (Hierholzer’s algorithm)",
			" *",
			" * Template parameter:",
			" *   directed = true  → finds Eulerian trail in a directed graph",
			" *           = false → finds Eulerian trail in an undirected graph",
			" *",
			" * Usage:",
			" *   Euler<directed> E;",
			" *   E.init(N);              // number of vertices 0...N-1",
			" *   E.add_edge(u, v);       // add edge u→v (and v→u if undirected)",
			" *   auto tour = E.solve(src);",
			" *   // `tour` is a list of (vertex, edge_id) in the Eulerian path order",
			" *   // If no Eulerian trail exists, `tour` will be empty.",
			" */",
			"template<bool directed>",
			"struct Euler {",
			"    using pii = pair<int,int>;",
			"    int N;",
			"    vector<vector<pii>> adj;",
			"    vector<vector<pii>::iterator> its;",
			"    vector<bool> used;",
			"",
			"    // Initialize for N vertices",
			"    void init(int _N) {",
			"        N = _N;",
			"        adj.assign(N, {});",
			"        used.clear();",
			"    }",
			"",
			"    // Add edge from a to b",
			"    void add_edge(int a, int b) {",
			"        int id = used.size();",
			"        used.push_back(false);",
			"        adj[a].emplace_back(b, id);",
			"        if (!directed) {",
			"            adj[b].emplace_back(a, id);",
			"        }",
			"    }",
			"",
			"    // Find Eulerian trail/circuit starting at `src` (default 0)",
			"    vector<pii> solve(int src = 0) {",
			"        // Prepare iterators for each adjacency list",
			"        its.resize(N);",
			"        for (int i = 0; i < N; ++i) {",
			"            its[i] = adj[i].begin();",
			"        }",
			"",
			"        vector<pii> ans;",
			"        vector<pii> stk{{src, -1}};",
			"        int last = -1;",
			"",
			"        while (!stk.empty()) {",
			"            int v = stk.back().first;",
			"            auto &it = its[v], end = adj[v].end();",
			"",
			"            // Skip used edges",
			"            while (it != end && used[it->second]) {",
			"                ++it;",
			"            }",
			"",
			"            if (it == end) {",
			"                // Backtrack: add to answer when no more edges",
			"                if (last != -1 && last != v) {",
			"                    // Graph is disconnected or no Eulerian trail",
			"                    return {};",
			"                }",
			"                ans.push_back(stk.back());",
			"                stk.pop_back();",
			"                if (!stk.empty()) {",
			"                    last = stk.back().first;",
			"                }",
			"            } else {",
			"                // Traverse next unused edge",
			"                stk.push_back(*it);",
			"                used[it->second] = true;",
			"            }",
			"        }",
			"",
			"        // Must cover all edges + 1 vertices",
			"        if ((int)ans.size() != (int)used.size() + 1) {",
			"            return {};",
			"        }",
			"        reverse(ans.begin(), ans.end());",
			"        return ans;",
			"    }",
			"};",
			"",
			"int main() {",
			"    ios::sync_with_stdio(false);",
			"    cin.tie(nullptr);",
			"",
			"    int N, M;",
			"    bool directed;",
			"    cin >> N >> M >> directed;",
			"    // directed = 1 for directed graph, 0 for undirected",
			"",
			"    // Instantiate Euler finder with the correct template parameter",
			"    if (directed) {",
			"        Euler<true> E;",
			"        E.init(N);",
			"        for (int i = 0; i < M; i++) {",
			"            int u, v;",
			"            cin >> u >> v;",
			"            // assume 1-based input; convert to 0-based",
			"            --u; --v;",
			"            E.add_edge(u, v);",
			"        }",
			"        auto tour = E.solve(0);",
			"        if (tour.empty()) {",
			"            cout << \"No Eulerian trail/circuit\\n\";",
			"        } else {",
			"            cout << \"Eulerian trail/circuit vertices:\\n\";",
			"            for (auto [v, id] : tour) {",
			"                cout << (v + 1) << ' ';",
			"            }",
			"            cout << \"\\n\";",
			"        }",
			"    } else {",
			"        Euler<false> E;",
			"        E.init(N);",
			"        for (int i = 0; i < M; i++) {",
			"            int u, v;",
			"            cin >> u >> v;",
			"            // assume 1-based input; convert to 0-based",
			"            --u; --v;",
			"            E.add_edge(u, v);",
			"        }",
			"        auto tour = E.solve(0);",
			"        if (tour.empty()) {",
			"            cout << \"No Eulerian trail/circuit\\n\";",
			"        } else {",
			"            cout << \"Eulerian trail/circuit vertices:\\n\";",
			"            for (auto [v, id] : tour) {",
			"                cout << (v + 1) << ' ';",
			"            }",
			"            cout << \"\\n\";",
			"        }",
			"    }",
			"",
			"    return 0;",
			"}"
		],
		"description": ""
	},
	"eightneen": {
		"prefix": "lis",
		"body": [
			"int lis(const vector<int>& a) {",
			"    vector<int> dp;",
			"    for (int x : a) {",
			"        auto it = lower_bound(dp.begin(), dp.end(), x);",
			"        if (it == dp.end()) dp.push_back(x);",
			"        else *it = x;",
			"    }",
			"    return dp.size();",
			"}",
			""
		],
		"description": ""
	},
	"nineteen": {
		"prefix": "lcs",
		"body": [
			"string lcs(const string& a, const string& b) {",
			"    int n = a.size(), m = b.size();",
			"    vector<vector<int>> dp(n+1, vector<int>(m+1));",
			"    ",
			"    for (int i = 0; i < n; ++i)",
			"        for (int j = 0; j < m; ++j)",
			"            dp[i+1][j+1] = (a[i] == b[j] ? dp[i][j]+1 : max(dp[i][j+1], dp[i+1][j]));",
			"    ",
			"    string res;",
			"    for (int i = n, j = m; i > 0 && j > 0; ) {",
			"        if (a[i-1] == b[j-1]) res += a[i-1], --i, --j;",
			"        else if (dp[i-1][j] > dp[i][j-1]) --i;",
			"        else --j;",
			"    }",
			"    reverse(res.begin(), res.end());",
			"    return res;",
			"}",
			""
		],
		"description": ""
	},
	"twenty": {
		"prefix": "knapsack",
		"body": [
			"int knapsack(const vector<int>& wt, const vector<int>& val, int W) {",
			"    int n = wt.size();",
			"    vector<vector<int>> dp(n+1, vector<int>(W+1));",
			"    for (int i = 1; i <= n; ++i) {",
			"        for (int w = 0; w <= W; ++w) {",
			"            dp[i][w] = dp[i-1][w];",
			"            if (w >= wt[i-1])",
			"                dp[i][w] = max(dp[i][w], dp[i-1][w - wt[i-1]] + val[i-1]);",
			"        }",
			"    }",
			"    return dp[n][W];",
			"}",
			""
		],
		"description": ""
	},
	"twentyone": {
		"prefix": "sweepline",
		"body": [
			"map<int, int> diff;",
			"    for (auto [l, r] : ranges) {",
			"        diff[l]++;",
			"        diff[r + 1]--;",
			"    }",
			"",
			"    int curr = 0, max_count = 0;",
			"    for (auto [pos, delta] : diff) {",
			"        curr += delta;",
			"        max_count = max(max_count, curr);",
			"    }",
			""
		],
		"description": ""
	},
	"twentytwo": {
		"prefix": "area",
		"body": [
			"double area(const vector<point>& fig) {",
			"    double res = 0;",
			"    for (unsigned i = 0; i < fig.size(); i++) {",
			"        point p = i ? fig[i - 1] : fig.back();",
			"        point q = fig[i];",
			"        res += (p.x - q.x) * (p.y + q.y);",
			"    }",
			"    return fabs(res) / 2;",
			"}",
			""
		],
		"description": ""
	}
}
